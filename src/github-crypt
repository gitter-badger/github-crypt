#!/usr/bin/env bash

BINDIR=$(dirname "$(greadlink -f "$0")")

function ghkeys() {
  local k=$(curl -L -f https://github.com/${1}.keys 2>/dev/null)

  if [ -n "${k}" ]; then
    if [ "${2}" == 'all' ] ; then
      echo "${k}"
    elif [ "${2}" == 'last' ] ; then
      echo $(echo "${k}" | tail -n 1)
    else
      echo $(echo "${k}" | awk "NR==${2}")
    fi
  else
    return 1
  fi
}

case "${1}" in
  bits)
    INDEX='all'

    while (( "$#" )); do
      case "${2}" in
        --index=*) INDEX=${2/--index=/''} ; shift ;;
        --username=*) USERNAME=${2/--username=/''} ; shift ;;
        -I*) INDEX=${3} ; shift ; shift ;;
        -u*) USERNAME=${3} ; shift ; shift ;;
        *) test -n "${2}" && USERNAME=${2} ; shift ;;
      esac
    done

    test -z "${USERNAME}" && read -e -p 'Enter GitHub username (e.g. rockymadden): ' USERNAME

    ghkeys "${USERNAME}" "${INDEX}" > "${BINDIR}/${USERNAME}.keys" || exit 1
    while read l; do
      echo "${l}" > "${BINDIR}/${USERNAME}.bits"
      ssh-keygen -l -f "${BINDIR}/${USERNAME}.bits" | awk '{print $1}'
    done < "${BINDIR}/${USERNAME}.keys"
  ;;

  decrypt)
    KEY=~/.ssh/id_rsa

    while (( "$#" )); do
      case "${2}" in
        --in=*) IN=${2/--in=/''} ; shift ;;
        --key=*) KEY=${2/--key=/''} ; shift ;;
        --out=*) OUT=${2/--out=/''} ; shift ;;
        -i*) IN=${3} ; shift ; shift ;;
        -k*) KEY=${3} ; shift ; shift ;;
        -o*) OUT=${3} ; shift ; shift ;;
        *) test -n "${2}" && IN=${2} ; shift ;;
      esac
    done

    test -z "${IN}" && read -e -p 'Enter path for in-file (e.g. file.txt.enc): ' IN
    test -z "${OUT}" && read -e -p 'Enter path for out-file (e.g. file.txt): ' OUT

    echo -n 'Decrypting: '
    bash -c "openssl rsautl -decrypt -inkey ${KEY} -in ${IN} -out ${OUT} 2>/dev/null"
    case "$?" in
      0) echo 'done' ;;
      *) echo 'fail' ; exit 1 ;;
    esac
  ;;

  encrypt)
    INDEX='last'

    while (( "$#" )); do
      case "${2}" in
        --in=*) IN=${2/--in=/''} ; shift ;;
        --index=*) INDEX=${2/--index=/''} ; shift ;;
        --out=*) OUT=${2/--out=/''} ; shift ;;
        --upload) UPLOAD='0' ; shift ;;
        --username=*) USERNAME=${2/--username=/''} ; shift ;;
        -i*) IN=${3} ; shift ; shift ;;
        -I*) INDEX=${3} ; shift ; shift ;;
        -o*) OUT=${3} ; shift ; shift ;;
        -u*) USERNAME=${3} ; shift ; shift ;;
        -U) UPLOAD='0' ; shift ;;
        *) test -n "${2}" && IN=${2} ; shift ;;
      esac
    done

    test -z "${USERNAME}" && read -e -p 'Enter GitHub username (e.g. rockymadden): ' USERNAME
    test -z "${IN}" && read -e -p 'Enter path for in-file (e.g. file.txt): ' IN
    test -z "${OUT}" && read -e -p 'Enter path for out-file (e.g. file.txt.enc): ' OUT

    echo -n 'Encrypting: '
    ghkeys "${USERNAME}" "${INDEX}" > "${BINDIR}/${USERNAME}.pub" && \
    ssh-keygen -f "${BINDIR}/${USERNAME}.pub" -e -m PKCS8 > "${BINDIR}/${USERNAME}.pem" && \
    bash -c "openssl rsautl -encrypt -pubin -inkey ${BINDIR}/${USERNAME}.pem -ssl -in ${IN} -out ${OUT} 2>/dev/null"
    case "$?" in
      0) echo 'done' ;;
      *) echo 'fail' ; exit 1 ;;
    esac

    if test -n "${UPLOAD}"; then
      echo -n 'Uploading: '
      bash -c "open -a CloudApp ${OUT}"
      case "$?" in
        0) echo 'done' ;;
        *) echo 'fail' ; exit 1 ;;
      esac
    fi
  ;;

  keys)
    INDEX='all'

    while (( "$#" )); do
      case "${2}" in
        --index=*) INDEX=${2/--index=/''} ; shift ;;
        --username=*) USERNAME=${2/--username=/''} ; shift ;;
        -I*) INDEX=${3} ; shift ; shift ;;
        -u*) USERNAME=${3} ; shift ; shift ;;
        *) test -n "${2}" && USERNAME=${2} ; shift ;;
      esac
    done

    test -z "${USERNAME}" && read -e -p 'Enter GitHub username (e.g. rockymadden): ' USERNAME

    ghkeys "${USERNAME}" "${INDEX}" || exit 1
  ;;

  --help)
    a=(${0//\// })
    bin=${a[${#a[@]}-1]}

    echo 'Usage:'
    echo "  ${bin} bits [username] [--username|-u <username>] [--index|-I <index>]"
    echo "  ${bin} decrypt [in-path] [--in|-i <in-path>] [--out|-o <out-path>] [--key|-k <key-path>]"
    echo "  ${bin} encrypt [in-path] [--in|-i <in-path>] [--out|-o <out-path>] [--username|-u <username>] [--index|-I <index>] [--upload|-U]"
    echo "  ${bin} keys [username] [--username|-u <username>] [--index|-I <index>]"
    echo
    echo "Discovery Commands:"
    echo "  bits     Output GitHub public key(s) bit-length"
    echo "  keys     Output GitHub public key(s)"
    echo
    echo "Crypto Commands:"
    echo "  encrypt     Encrypt a file with a GitHub public key; only the corresponding private key can decrypt"
    echo "  decrypt     Decrypt a file with the private key corresponding to the GitHub public key used to encrypt"
  ;;

  --version) echo 'v0.3.0' ;;

  *) ${0} --help ; exit 1 ;;
esac

exit 0
