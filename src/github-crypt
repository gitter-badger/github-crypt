#!/usr/bin/env bash

bindir=
vardir=

function ghkeys() {
  local k=$(curl -L -f https://github.com/${1}.keys 2>/dev/null)

  if [ -n "${k}" ]; then
    if [ "${2}" == 'all' ] ; then
      echo "${k}"
    elif [ "${2}" == 'last' ] ; then
      echo $(echo "${k}" | tail -n 1)
    else
      echo $(echo "${k}" | awk "NR==${2}")
    fi
  else
    return 1
  fi
}

case "${1}" in
  bits)
    index='all'

    while (( "$#" )); do
      case "${2}" in
        --index=*) index=${2/--index=/''} ; shift ;;
        --username=*) username=${2/--username=/''} ; shift ;;
        -i*) index=${3} ; shift ; shift ;;
        -u*) username=${3} ; shift ; shift ;;
        *) test -n "${2}" && username=${2} ; shift ;;
      esac
    done

    test -z "${username}" && read -e -p 'Enter GitHub username: ' username

    ghkeys "${username}" "${index}" > "${vardir}/${username}.keys" || exit 1
    while read l; do
      echo "${l}" > "${vardir}/${username}.bits"
      ssh-keygen -l -f "${vardir}/${username}.bits" | awk '{print $1}'
    done < "${vardir}/${username}.keys"
  ;;

  decrypt)
    key=~/.ssh/id_rsa

    while (( "$#" )); do
      case "${2}" in
        --file=*) file=${2/--file=/''} ; shift ;;
        --key=*) key=${2/--key=/''} ; shift ;;
        -f*) file=${3} ; shift ; shift ;;
        -k*) key=${3} ; shift ; shift ;;
        *) test -n "${2}" && file=${2} ; shift ;;
      esac
    done

    test -z "${file}" && read -e -p 'Enter file path: ' file

    echo -n 'Decrypting: '
    bash -c "openssl rsautl -decrypt -inkey ${key} -in ${file} -out ${file/.enc/''} 2>/dev/null"
    case "$?" in
      0) echo 'done' ;;
      *) echo 'fail' ; exit 1 ;;
    esac
  ;;

  encrypt)
    index='last'

    while (( "$#" )); do
      case "${2}" in
        --file=*) file=${2/--in=/''} ; shift ;;
        --index=*) index=${2/--index=/''} ; shift ;;
        --username=*) username=${2/--username=/''} ; shift ;;
        -f*) file=${3} ; shift ; shift ;;
        -i*) index=${3} ; shift ; shift ;;
        -u*) username=${3} ; shift ; shift ;;
        *) test -n "${2}" && file=${2} ; shift ;;
      esac
    done

    test -z "${file}" && read -e -p 'Enter file path: ' file
    test -z "${username}" && read -e -p 'Enter GitHub username: ' username

    echo -n 'Encrypting: '
    ghkeys "${username}" "${index}" > "${vardir}/${username}.pub" && \
    ssh-keygen -f "${vardir}/${username}.pub" -e -m PKCS8 > "${vardir}/${username}.pem" && \
    bash -c "openssl rsautl -encrypt -pubin -inkey ${vardir}/${username}.pem -ssl -in ${file} -out ${file}.enc 2>/dev/null"
    case "$?" in
      0) echo 'done' ;;
      *) echo 'fail' ; exit 1 ;;
    esac
  ;;

  keys)
    index='all'

    while (( "$#" )); do
      case "${2}" in
        --index=*) index=${2/--index=/''} ; shift ;;
        --username=*) username=${2/--username=/''} ; shift ;;
        -i*) index=${3} ; shift ; shift ;;
        -u*) username=${3} ; shift ; shift ;;
        *) test -n "${2}" && username=${2} ; shift ;;
      esac
    done

    test -z "${username}" && read -e -p 'Enter GitHub username: ' username

    ghkeys "${username}" "${index}" || exit 1
  ;;

  --help)
    a=(${0//\// })
    bin=${a[${#a[@]}-1]}

    echo 'Usage:'
    echo "  ${bin} bits <username> [--index|-i <index>]"
    echo "  ${bin} decrypt <file> [--key|-k <key>]"
    echo "  ${bin} encrypt <file> [--username|-u <username>] [--index|-i <index>]"
    echo "  ${bin} keys <username> [--index|-i <index>]"
    echo
    echo "Discovery Commands:"
    echo "  bits     Output GitHub public key(s) bit-length"
    echo "  keys     Output GitHub public key(s)"
    echo
    echo "Crypto Commands:"
    echo "  encrypt     Encrypt a file with a GitHub public key; only the corresponding private key can decrypt"
    echo "  decrypt     Decrypt a file with the private key corresponding to the GitHub public key used to encrypt"
  ;;

  --version) echo 'v0.4.0' ;;

  *) ${0} --help ; exit 1 ;;
esac

exit 0
